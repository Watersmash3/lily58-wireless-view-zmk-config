/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <27 28>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <39 40>;
        };

        find {
            bindings = <&kp LC(F)>;
            key-positions = <15 16>;
        };

        find-and-replace {
            bindings = <&kp LC(R)>;
            key-positions = <14 15>;
        };

        delinea {
            bindings = <&delinea>;
            key-positions = <20 21>;
        };
    };

    behaviors {
        ht_tp: ht_tp {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_TP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            hold-trigger-key-positions = <55 52>;
        };

        shift: shift {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            hold-trigger-key-positions = <53 54>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
        };
    };

    macros {
        delinea: copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(A) &kp LS(P) &kp N &kp N &kp EQUAL &kp SQT &kp N1 &kp LS(K) &kp DOT &kp M &kp N0 &kp N5 &kp O &kp G &kp Q &kp O>;
            label = "COPY";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Core {
            bindings = <
&trans     &trans  &trans  &trans    &trans     &trans                            &trans  &trans   &trans     &trans   &trans             &trans
&kp TAB    &kp Q   &kp W   &kp F     &kp P      &kp B                             &kp J   &kp L    &kp U      &kp Y    &kp SQT            &kp BSPC
&kp ESC    &kp A   &kp R   &kp S     &kp T      &kp G                             &kp M   &kp N    &kp E      &kp I    &kp O              &kp SEMI
&kp LSHFT  &kp Z   &kp X   &kp C     &kp D      &kp V   &trans       &trans       &kp K   &kp H    &kp COMMA  &kp DOT  &kp DOUBLE_QUOTES  &kp RSHFT
                           &kp LALT  &kp LCTRL  &mo 3   &kp SPACE    &lt 2 ENTER  &mo 1   &kp DEL  &kp LGUI
            >;
        };

        Symbol {
            bindings = <
&trans  &trans           &trans       &trans            &trans             &trans                         &trans         &trans                &trans                 &trans         &trans         &trans
&trans  &kp EXCLAMATION  &kp AT_SIGN  &kp POUND         &kp DOLLAR         &kp PERCENT                    &kp LCTRL      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp COLON      &kp BACKSLASH  &trans
&trans  &kp MINUS        &kp PLUS     &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp PIPE                       &kp AMPERSAND  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp SEMICOLON  &kp SLASH      &trans
&trans  &kp GRAVE        &kp TILDE    &kp ASTERISK      &kp UNDERSCORE     &kp PERIOD   &trans    &trans  &kp COMMA      &kp LESS_THAN         &kp GREATER_THAN       &kp QUESTION   &kp SLASH      &trans
                                      &trans            &trans             &trans       &trans    &trans  &trans         &trans                &trans
            >;
        };

        Nav {
            bindings = <
&trans  &trans  &trans   &trans   &trans   &trans                    &trans           &trans     &trans      &trans      &trans     &trans
&trans  &kp F1  &kp F2   &kp F3   &kp F4   &trans                    &kp C_VOLUME_UP  &kp PG_UP  &trans      &trans      &kp HOME   &trans
&trans  &kp F5  &kp F6   &kp F7   &kp F8   &trans                    &kp C_MUTE       &kp LEFT   &kp DOWN    &kp UP      &kp RIGHT  &trans
&trans  &kp F9  &kp F10  &kp F11  &kp F12  &trans  &trans    &trans  &kp C_VOL_DN     &kp PG_DN  &kp C_PREV  &kp C_NEXT  &kp END    &trans
                         &trans   &trans   &trans  &trans    &trans  &trans           &trans     &trans
            >;
        };

        Num {
            bindings = <
&trans  &trans        &trans        &trans        &trans        &trans                             &trans        &trans     &trans   &trans  &trans  &trans
&trans  &kp N1        &kp N2        &kp N3        &kp N4        &kp N5                             &kp N6        &kp N7     &kp N8   &kp N9  &kp N0  &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                       &kp ASTERISK  &kp N4     &kp N5   &kp N6  &kp N0  &trans
&trans  &bt BT_CLR    &trans        &trans        &trans        &trans        &trans    &trans     &kp SLASH     &kp N1     &kp N2   &kp N3  &trans  &trans
                                    &trans        &trans        &trans        &trans    &kp EQUAL  &kp PLUS      &kp MINUS  &kp DOT
            >;
        };
    };
};
